{
  "name": "image-resolver",
  "version": "0.5.4",
  "description": "Extract main image for a given URL",
  "main": "src/ImageResolver.js",
  "directories": {
    "example": "example",
    "test": "tests"
  },
  "scripts": {
    "test": "jasmine-node tests/node/"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/mauricesvay/ImageResolver.git"
  },
  "author": {
    "name": "Maurice Svay",
    "email": "maurice@svay.com"
  },
  "license": "BSD",
  "bugs": {
    "url": "https://github.com/mauricesvay/ImageResolver/issues"
  },
  "homepage": "https://github.com/mauricesvay/ImageResolver",
  "devDependencies": {
    "browserify": "^3.46.1",
    "gulp": "^3.6.2",
    "vinyl-source-stream": "^0.1.1"
  },
  "dependencies": {
    "htmlparser2": "^3.7.1",
    "request": "^2.36.0",
    "superagent": "^0.18.0"
  },
  "readme": "ImageResolver.js\n================\n\nImageResolver.js is a library that extracts the main image of a URL while saving resources.\nInstead of loading all images of a URL, it will try to guess the main image from the URL or the webpage.\nIt's like Readability for images.\n\n**Demo** : [http://mauricesvay.github.com/ImageResolver/](http://mauricesvay.github.com/ImageResolver/)\n\nImageResolver works in browsers and Node.js.\n\nTo detect images, ImageResolver comes with built-in plugins:\n\n* FileExtension: use file extension in urls\n* ImgurPage: extract image from imgur.com urls\n* NineGag: extract image from 9gag.com urls\n* Instagram: extract image from instagram.com urls\n* MimeType: use MIME type to detect images\n* ImgurAlbum: extract image from imgur.com albums\n* Flickr: extract image from Flickr urls (requires API key)\n* Opengraph: use opengraph meta to extract image\n* Webpage: parse HTML to extract image\n\nOf course, you can create your own plugins.\n\nHow to install\n--------------\n\nIn Node.js:\n\n```\nnpm install image-resolver\n```\n\nIn a browser:\n\n```\n<script src=\"dist/ImageResolver.js\" type=\"text/javascript\"></script>\n```\n\nHow to use\n----------\n\n```\nvar resolver = new ImageResolver();\nresolver.register(new ImageResolver.FileExtension());\nresolver.register(new ImageResolver.MimeType());\nresolver.register(new ImageResolver.Opengraph());\nresolver.register(new ImageResolver.Webpage());\n\nresolver.resolve( \"http://example.com/\", function( result ){\n    if ( result ) {\n        console.log( result.image );\n    } else {\n        console.log( \"No image found\" );\n    }\n});\n```\n\nAPI\n---\n\n### ImageResolver( [options] )\n\nCreate a new instance of ImageResolver\n\n### ImageResolver.register( plugin )\n\nRegister the given plugin for resolving images.\nYou must register at least one plugin.\nPlugins are executed in the order of their registration.\n\n### ImageResolver.resolve( url, callback )\n\nExtract main image from given url. Callback will be called with `null` when\nno image is found, or an object when the image is found.\n\n\nHow to write your own plugin\n----------------------------\n\nTo create a plugin, create an object that has `resolve` method.\nThe `resolve` method must have this signature:\n\n```\nfunction( url, clbk, options, utils ) {\n    ...\n}\n```\n\n* url : url to resolve\n* clbk : callback\n* options : ImageResolver options\n* utils : util functions\n\nWhen your plugin has found an image, you must call `clbk` with the image as\nparameter:\n\n```\nclbk( image_url );\n```\n\nIf your plugin can not find an image, you must call `clbk` with null as\nparameter\n\n```\nclbk( null );\n```\n\nIf your plugin needs to make HTTP GET requests, it is recommended to use\n`utils.fetch`. This function lets you make GET requests, works in browsers and Node.js,\nand the result will be cached and shared between plugins.\n\nIf you need more control over HTTP requests, you can use `utils.request` that\ngives you access to the raw superagent library.\n\nRunning tests\n-------------\n\nImageResolver comes with a series of tests.\n\nTo run those tests:\n\n* npm install -g jasmine-node\n* npm test\n\nCompiling the browser lib\n-------------------------\n\n* `npm install`\n* `npm install -g gulp`\n* `gulp` to build the browser lib",
  "readmeFilename": "README.md",
  "_id": "image-resolver@0.5.4",
  "_from": "image-resolver@"
}
